package com.manydesigns.portofino.reflection;

import com.manydesigns.elements.annotations.*;
import com.manydesigns.elements.annotations.impl.*;
import com.manydesigns.elements.reflection.PropertyAccessor;
import com.manydesigns.portofino.model.database.Column;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.Modifier;
import java.util.Map;

public class ColumnAccessor extends AbstractAnnotatedAccessor implements PropertyAccessor {
	protected final Column column;
	protected final PropertyAccessor nestedPropertyAccessor;

	public static final Logger logger = LoggerFactory.getLogger(ColumnAccessor.class);

	public ColumnAccessor(Column column, boolean inPk, boolean autoGenerated, PropertyAccessor nestedPropertyAccessor) {
		super(column.getAnnotations());
		this.column = column;
		this.nestedPropertyAccessor = nestedPropertyAccessor;

		annotations.put(Required.class, new RequiredImpl(!column.isNullable()));

		if (column.getLength() != null && column.getLength() > 0) {
			if (String.class.equals(column.getActualJavaType())) {
				annotations.put(MaxLength.class, new MaxLengthImpl(column.getLength()));
			} else if (column.getScale() != null && column.getScale() >= 0) {
				annotations.put(PrecisionScale.class, new PrecisionScaleImpl(column.getLength(), column.getScale()));
			}
		}
		annotations.put(Enabled.class, new EnabledImpl(true));
		annotations.put(Updatable.class, new UpdatableImpl(!inPk));
		annotations.put(Insertable.class, new InsertableImpl(!column.isAutoincrement() && !autoGenerated));
		annotations.put(Searchable.class, new SearchableImpl(column.isSearchable()));
	}

	public String getName() {
		return column.getActualPropertyName();
	}

	public Class getType() {
		return column.getActualJavaType();
	}

	public int getModifiers() {
		return Modifier.PUBLIC;
	}

	public Object get(Object obj) {
		if (nestedPropertyAccessor == null) {
			return ((Map) obj).get(column.getActualPropertyName());
		} else {
			return nestedPropertyAccessor.get(obj);
		}
	}

	public void set(Object obj, Object value) {
		if (nestedPropertyAccessor == null) {
			// noinspection unchecked
			((Map) obj).put(column.getActualPropertyName(), value);
		} else {
			nestedPropertyAccessor.set(obj, value);
		}
	}

	public Column getColumn() {
		return column;
	}

	@Override
	public String toString() {
		return new ToStringBuilder(this).append("column", column.getQualifiedName()).toString();
	}
}
